---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import Profile from '../components/Profile.astro';
import Comment from '../components/Comment.astro';
import Toc from '../components/Toc.astro';
import { comment } from "../consts";
import ScrollToTop from '../components/ScrollToTop.astro';
import BlogAside from '../components/BlogAside.astro';

const { frontmatter = { comment: true, donate: false, toc: false, mathjax: false, mermaid: false } } = Astro.props;
---

<html lang="en">
<BaseHead mathjax={frontmatter.mathjax} mermaid={frontmatter.mermaid} title={frontmatter.title} description={frontmatter.description} />

<body class="bg-skin-secondary">
  <Header />
  <main class="container p-4 pt-20 text-skin-base min-h-full pb-32 relative" id="app">
    <div class="grid grid-cols-4 gap-8">
      <div class="col-span-4 xl:col-span-3 space-y-4">
        <slot />
        {frontmatter.comment && comment.enable && <Comment />}
      </div>
      <div class="hidden xl:block col-span-1 relative">
        <Profile />
        <BlogAside />
        {frontmatter.toc && <Toc />}
      </div>
      <ScrollToTop />
    </div>
    <Footer />
  </main>
</body>
</html>

<script>
  import { Fancybox } from "@fancyapps/ui";
  import "@fancyapps/ui/dist/fancybox/fancybox.css";
  Fancybox.bind("[data-fancybox]");

  const markdownBody = document.querySelector(".markdown-body");
  if (markdownBody) {
    const images = markdownBody.querySelectorAll("img");
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const image = entry.target;
          const data_src = image.getAttribute("data-src");
          const data_alt = image.getAttribute("data-alt");
          image.setAttribute("data-fancybox", "gallery");
          if (data_src) image.setAttribute("src", data_src);
          if (data_alt) image.setAttribute("alt", data_alt);
          observer.unobserve(image);
        }
      });
    });
    images.forEach((image) => observer.observe(image));

    const links = markdownBody.querySelectorAll("a");
    links.forEach((link) => {
      const names = link.getAttributeNames();
      const url = link.getAttribute("href");
      if (!names.includes('data-footnote-backref') && !names.includes('data-footnote-ref') && !url?.startsWith('/')) {
        link.setAttribute("target", "_blank");
        link.setAttribute("rel", "nofollow noreferrer");
      }
    });
  }
</script>
