---
import {getCollection} from 'astro:content';
import BlogPost from '../../layouts/BlogPost.astro'
import PostTitle from "../../components/PostTitle.astro";
import {getCollectionByName} from "../../utils/getCollectionByName";
import { sortNotesByZettelId } from '../../utils/sortNotesByZettelId';
import BlogFooter from '../../components/BlogFooter.astro';


export const prerender = true;

export async function getStaticPaths() {
  const blogEntries = (await getCollection('notes')).filter(({data}) => {
    return import.meta.env.PROD ? !data.draft : true
  });
  return blogEntries.map(entry => ({
    params: {slug: entry.slug}, props: {entry,},
  }));
}

const {entry} = Astro.props;
const slug = entry.slug;
const {Content, remarkPluginFrontmatter} = await entry.render();

const lastModified = entry.data.updateDate ?? remarkPluginFrontmatter.lastModified

const allNotes = await getCollectionByName("notes");
const sortPosts = sortNotesByZettelId(allNotes);

const currentPostIndex = sortPosts.findIndex(
(postItem) => postItem.data.title === entry.data.title
);
let prevPost, nextPost
if (sortPosts[currentPostIndex - 1]) {
  prevPost = sortPosts[currentPostIndex - 1];
}
if (sortPosts[currentPostIndex + 1]) {
  nextPost = sortPosts[currentPostIndex + 1];
}

// Build backlinks
const allLinks = {};
const linkRegex = /\[.*?\]\((.*?)\)/g;

allNotes.forEach((note) => {
  const links = [...note.body.matchAll(linkRegex)];
  if (links) {
    links.forEach((link) => {
      const linkUrl = link[1];

      if (linkUrl) {
        if (!allLinks[linkUrl]) {
          allLinks[linkUrl] = [];
        }
        allLinks[linkUrl].push({
          frontmatter: note.data,
          url: `/notes/${note.slug}`
        });
      }
    });
  }
});

const pathname = `/notes/${slug}/`;
const backlinks = allLinks[pathname] || [];

---
<BlogPost frontmatter={entry.data}>
  <div>
    <PostTitle
      {...entry.data}
      title={`${entry.data.zettelId}: ${entry.data.title}`}
      slug={`/notes/${entry.slug}`}
      lastModified={lastModified}
      readingTime={remarkPluginFrontmatter.readingTime}
      ></PostTitle>
    <div class="divider-horizontal"></div>
    <article class="markdown-body">
      <Content/>
      <!-- Backlinks are part of the article -->
      {backlinks.length > 0 && (<h4>This note is mentioned in: </h4>)}
      {backlinks.length > 0 && backlinks.map((backlink) => (
        <span><a href={backlink.url} class="cursor-pointer mt-1 hover:text-skin-active">{backlink.frontmatter.zettelId};</a> </span>
      ))}
    </article>
    <div class="divider-horizontal"></div>

    <div class="h-8 text-skin-base">
      {
        prevPost ? (
        <a
        class="truncate  w-auto max-w-[40%] float-left"
        href={prevPost.collection == 'posts'
        ? '/' + prevPost.slug + '/'
        : '/' + prevPost.collection + '/' + prevPost.slug + '/'}
        title={prevPost.data.zettelId + ": " + prevPost.data.title}
        >
        <i class="ri-arrow-left-s-fill"/>
        {prevPost.data.zettelId + ": " + prevPost.data.title}
      </a>
      ) : (
      <div/>
      )
    }
    {
      nextPost ? (
      <div class="flex item-center float-right w-auto max-w-[40%] text-right">
      <a class="truncate " href={nextPost.collection == 'posts'
      ? '/' + nextPost.slug + '/'
      : '/' + nextPost.collection + '/' + nextPost.slug + '/'}
      title={nextPost.data.zettelId + ": " + nextPost.data.title}>
          {nextPost.data.zettelId + ": " + nextPost.data.title}
        </a>
        <i class="ri-arrow-right-s-fill float-right"/>
      </div>
      ) : (
      <div/>
      )
    }
  </div>
  <BlogFooter title={entry.data.title} url={entry.slug} date={entry.data.date}></BlogFooter>
</BlogPost>
